[{"/home/universe.dart.spb/spalacio/cocolorgame/client/src/index.js":"1","/home/universe.dart.spb/spalacio/cocolorgame/client/src/App.js":"2","/home/universe.dart.spb/spalacio/cocolorgame/client/src/game/GamePlay/index.jsx":"3","/home/universe.dart.spb/spalacio/cocolorgame/client/src/game/GameSetup/index.jsx":"4","/home/universe.dart.spb/spalacio/cocolorgame/client/src/game/ScoreBoard/index.jsx":"5","/home/universe.dart.spb/spalacio/cocolorgame/client/src/components/ColorBox.jsx":"6","/home/universe.dart.spb/spalacio/cocolorgame/client/src/components/FrameTransition.jsx":"7"},{"size":177,"mtime":1611826011765,"results":"8","hashOfConfig":"9"},{"size":1186,"mtime":1613786588236,"results":"10","hashOfConfig":"9"},{"size":3379,"mtime":1613786685179,"results":"11","hashOfConfig":"9"},{"size":8651,"mtime":1612494339326,"results":"12","hashOfConfig":"9"},{"size":2814,"mtime":1612106916455,"results":"13","hashOfConfig":"9"},{"size":190,"mtime":1613784284269,"results":"14","hashOfConfig":"9"},{"size":421,"mtime":1613785183129,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"bq32dg",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/universe.dart.spb/spalacio/cocolorgame/client/src/index.js",[],["32","33"],"/home/universe.dart.spb/spalacio/cocolorgame/client/src/App.js",[],"/home/universe.dart.spb/spalacio/cocolorgame/client/src/game/GamePlay/index.jsx",[],"/home/universe.dart.spb/spalacio/cocolorgame/client/src/game/GameSetup/index.jsx",["34"],"import _ from 'lodash';\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Button, Typography, TextField, Menu } from '@material-ui/core';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport PopupState, { bindTrigger, bindMenu } from 'material-ui-popup-state';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport SpaceBarIcon from '@material-ui/icons/SpaceBar';\nimport MouseIcon from '@material-ui/icons/Mouse';\n\nimport styles from './game-setup.module.css'\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Box from '../../components/ColorBox';\n\nimport boardImage from './makeymakeyclassic.png';\n\nconst requireColorImages = (color) => require(`../../image-urls/${color}.json`);\n\nconst imagesByColor = {\n  red: requireColorImages('red'),\n  blue: requireColorImages('blue'),\n  green: requireColorImages('green'),\n  purple: requireColorImages('purple'),\n  yellow: requireColorImages('yellow'),\n  orange: requireColorImages('orange'),\n};\n\nconst pickRandom = (array) => array.splice((Math.random() * array.length) | 0, 1)[0];\n\nconst createGame = (questionsCount, boardColorConfig) => {\n  const selectedColors = Object.values(boardColorConfig);\n  const gameColors = _.pick(_.cloneDeep(imagesByColor), selectedColors);\n\n  return _.filter(_.range(questionsCount).map(() => {\n    const color = _.sample(selectedColors);\n    const image = pickRandom(gameColors[color]);\n    return image ? { color, image } : null;\n  }));\n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  modalPaper: {\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(4),\n  },\n  menuGrid: {\n    padding: '16px 32px',\n    overflow: 'hidden',\n  },\n  clickable: {\n    cursor: 'pointer'\n  }\n}));\n\nconst ColorPicker = ({ interactionName, color, setColor, direction = \"row\" }) => {\n  const iconsByInteractionName = {\n    ArrowUp: ArrowUpwardIcon,\n    ArrowDown: ArrowDownwardIcon,\n    ArrowLeft: ArrowBackIcon,\n    ArrowRight: ArrowForwardIcon,\n    Space: SpaceBarIcon,\n    Click: MouseIcon,\n  };\n\n  const classes = useStyles();\n  const Icon = iconsByInteractionName[interactionName];\n  const fontSize = '52px';\n  return (\n    <Grid container justify=\"space-around\" alignItems=\"center\" justify={direction === \"column\" ? \"center\" : undefined} item>\n      <PopupState variant=\"popover\" popupId='somecrazyid'>\n        {(popupState) => (\n          <React.Fragment>\n            <Paper className={[classes.paper, classes.clickable].join(' ')} {...bindTrigger(popupState)}>\n              <Grid container alignItems=\"center\" direction={direction}>\n                <Icon style={{ color, fontSize }} />\n              </Grid>\n            </Paper>\n            <Menu className={classes.modalPaper} {...bindMenu(popupState)}>\n              <Grid container direction=\"column\" spacing={3} className={classes.menuGrid}>\n                <Grid item xs={12}>\n                  <Typography variant=\"h5\" id=\"transition-modal-title\">Select Color:</Typography>\n                </Grid>\n                <Grid container spacing={2} item xs={12}>\n                  {Object.keys(imagesByColor).map(color => {\n                    return (\n                      <Grid key={color} item xs onClick={() => setColor(color) || popupState.close()}>\n                        <Box color={color} />\n                      </Grid>\n                    )\n                  })}\n                </Grid>\n              </Grid>\n            </Menu>\n          </React.Fragment>)}\n      </PopupState>\n    </Grid>\n  );\n};\n\nexport default function GameSetup({ onSetupDone }) {\n  const [boardColorConfig, setBoardColorConfig] = useState({\n    ArrowUp: 'green',\n    ArrowDown: 'purple',\n    ArrowLeft: 'blue',\n    ArrowRight: 'red',\n    Space: 'yellow',\n    Click: 'orange',\n  });\n\n  const [questionsCount, setQuestionsCount] = useState(10);\n\n  const classes = useStyles();\n\n  // const [leftColors, rightColors] = _.chunk(Object.entries(boardColorConfig), 3);\n\n  const setInteraction = (interaction, color) => {\n    setBoardColorConfig({\n      ...boardColorConfig,\n      [interaction]: color,\n    });\n  };\n\n  return (\n    <Grid container spacing={3} justify=\"center\" alignItems=\"center\" item xs={12}>\n      <Grid container justify=\"center\" item xs={12}>\n        <Typography variant=\"h2\">Game Setup</Typography>\n      </Grid>\n      <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={6}>\n          <Paper className={classes.paper} >\n            <img width=\"720\" src={boardImage} alt=\"\" />\n          </Paper>\n        </Grid>\n\n        <Grid container spacing={7} item xs={6}>\n          <Grid container item xs={12} justify=\"center\">\n\n            {/* Arrow Buttons */}\n            <Grid container spacing={2} item xs={6}>\n              <Grid container item xs={12} justify=\"center\">\n                <ColorPicker\n                  direction=\"column\"\n                  interactionName=\"ArrowUp\"\n                  color={boardColorConfig['ArrowUp']}\n                  setColor={(newColor) => setInteraction(\"ArrowUp\", newColor)}\n                />\n              </Grid>\n              <Grid container item xs={12} justify=\"center\">\n                <Grid item justify=\"flex-end\">\n                  <ColorPicker\n                    interactionName=\"ArrowLeft\"\n                    color={boardColorConfig[\"ArrowLeft\"]}\n                    setColor={(newColor => setInteraction(\"ArrowLeft\", newColor))}\n                  />\n                </Grid>\n                <Grid xs={3} />\n                <Grid item justify=\"flex-start\">\n                  <ColorPicker\n                    interactionName=\"ArrowRight\"\n                    color={boardColorConfig[\"ArrowRight\"]}\n                    setColor={(newColor => setInteraction(\"ArrowRight\", newColor))}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container item xs={12} justify=\"center\" >\n                <ColorPicker\n                  direction=\"column\"\n                  interactionName=\"ArrowDown\"\n                  color={boardColorConfig['ArrowDown']}\n                  setColor={(newColor) => setInteraction(\"ArrowDown\", newColor)}\n                />\n              </Grid>\n            </Grid>\n\n            {/* Space + Click */}\n            <Grid container spacing={2} item xs={3}>\n              <Grid container item xs={6}>\n                <ColorPicker\n                  interactionName=\"Space\"\n                  color={boardColorConfig['Space']}\n                  setColor={(newColor) => setInteraction(\"Space\", newColor)}\n                />\n              </Grid>\n              <Grid container item xs={6}>\n                <ColorPicker\n                  interactionName=\"Click\"\n                  color={boardColorConfig['Click']}\n                  setColor={(newColor) => setInteraction(\"Click\", newColor)}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Paper className={classes.paper}>\n              <Grid container justify=\"space-around\" item xs={12}>\n                <Typography>Pictures amount to show:</Typography>\n                <TextField\n                  color=\"secondary\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  value={questionsCount}\n                  onChange={(e) => setQuestionsCount(e.target.value)}\n                />\n              </Grid>\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12} container direction=\"column\" alignItems=\"center\">\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => onSetupDone({ questionSet: createGame(questionsCount, boardColorConfig), boardColorConfig })}>start game\n                </Button>\n        </Grid>\n      </Grid>\n      <div className={styles.watermarkLayout}>\n        <Grid container justify=\"center\" alignItems=\"center\">\n          <Typography variant=\"subtitle1\" >Coded with&nbsp;</Typography><FavoriteIcon style={{ color: 'red' }} /><Typography>&nbsp;for Cocó</Typography>\n        </Grid>\n      </div>\n    </Grid>\n  );\n};\n","/home/universe.dart.spb/spalacio/cocolorgame/client/src/game/ScoreBoard/index.jsx",[],"/home/universe.dart.spb/spalacio/cocolorgame/client/src/components/ColorBox.jsx",[],"/home/universe.dart.spb/spalacio/cocolorgame/client/src/components/FrameTransition.jsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":85,"column":64,"nodeType":"41","endLine":85,"endColumn":119},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]